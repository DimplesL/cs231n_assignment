import numpy as np

def maxout_forward(x, W, b):
  """
  Computes the forward pass for a layer of maxout units (ReLUs).

  Input:
  - x: Inputs, of any shape (N,d_1,d_2 .. d_k)
  - maxout_param: A dictionary with the following keys:
    - W: Maxout parameter. with dimension of (K,D,H). k is the channel number. D=d_1*d_2*...*d_k
    - b: Maxout parameter. bias, with dimension of (K,H).
    Zij = X.T.dot(W[:,i,j]) + b[[i][j]
  Returns a tuple of:
  - out: Output, with dimension of (N,H)
  - cache: x, maxout_param, and the idx array (N,H) which hold the memory of 
    which channel the maxout uses to calulate the ith neuron out of H neurons.
  """

  #W = maxout_param_W
  #b = maxout_param_b  
  k,D,H = W.shape
  x1 = x.reshape(x.shape[0],-1)
  z = np.zeros((x.shape[0],W.shape[0],W.shape[2]))
  #for i in range(k):
  #  z[:,i,:] = x1.dot(W[i]) + b[i]
  z[:,range(k),:] = x1.dot(W[range(k)]) + b[range(k)]
  out = np.max(z,axis=1)
  idx = np.argmax(z,axis=1)
  cache = (x,W,b,idx)
  return out,cache  

def maxout_backward(dout,cache):
  """
  Computes the backward pass for a maxout layer.

  Inputs:
  - dout: Upstream derivative, of shape (N, H)
  - cache: Tuple of:
    - x: Input data, of shape (N,d_1,d_2 .. d_k) 
    - maxout_param: W and b.
    - idx: the idx array (N,H) which hold the memory of which channel 
      the maxout uses to calulate the ith neuron out of H neurons.

  Returns a tuple of:
  - dx: Gradient with respect to x, of shape (N, d1, ..., d_k)
  - dw: Gradient with respect to w, of shape (k, D, H)
  - db: Gradient with respect to b, of shape (k, H)
  """
  x, W, b, idx= cache
  x1 = x.reshape(x.shape[0],-1)
  k,D,H = W.shape
  N = x.shape[0]
  dW = np.zeros(W.shape)
  db = np.zeros(b.shape)
  dx = np.zeros(x.shape) 
  for n in range(N):
    W_part = np.zeros((W.shape[1],W.shape[2]))
    #W_part[:,range(H)] = W[idx[n,range(H)],:,range(H)]
    for i in range(H):
      W_part[:,i] = W[idx[n][i],:,i]
      dW[idx[n,i],:,i] += x1[n].T.dot(dout[n,i])
      #db[idx[n,i],i] += dout[n,i]
    db[idx[n,range(H)],range(H)] += dout[n,range(H)]
    dx[n] += dout[n].dot(W_part.T).reshape(x.shape[1:])
    #dW[idx[n],:,range(H)] += x1.T.dot(dout[:,range(H)])
  return dx,dW,db

def affine_forward(x, w, b):
  """
  Computes the forward pass for an affine (fully-connected) layer.

  The input x has shape (N, d_1, ..., d_k) where x[i] is the ith input.
  We multiply this against a weight matrix of shape (D, M) where
  D = \prod_i d_i

  Inputs:
  x - Input data, of shape (N, d_1, ..., d_k)
  w - Weights, of shape (D, M)
  b - Biases, of shape (M,)
  
  Returns a tuple of:
  - out: output, of shape (N, M)
  - cache: (x, w, b)
  """
  out = x.reshape(x.shape[0], -1).dot(w) + b
  cache = (x, w, b)
  return out, cache

  
def BNTransformation_old(x,rr,bb):
  mean = np.mean(x)
  var = np.var(x)
  return (x-mean)*rr/np.sqrt(var+1e-8) + bb

def BatchNormalization_forward_naive(x,rr,bb):
  """
  Inputs: 
     - x: Input data, of shape (N, d_1 .... d_k) 
      either from convnet or from an affine layer below
     - r: gama with shape of (x.shape[1],)
     - bb:  beta with shape of (x.shape[1],)
  """
  xx = x.reshape(x.shape[0],-1)
  yy = np.zeros(xx.shape)
  for k in range(xx.shape[1]):
    yy[:,k] = BNTransformation(xx[:,k],rr[k],bb[k])
  cache = (x,rr,bb)
  return yy, cache

def BatchNormalization_backward_naive(dout, cache):
  """
  Inputs:
     - dout: Upstream derivative, of shape(N,K)
     - cache: Tuple of 
         x: Input data, of shape(N, d_1 .. d_k)
         rr, bb
  Returens:
     - dx(N,d_1 .... d_k), drr(x.shape[1]),dbb(x.shape[1])

  """
  x,rr,bb = cache
  xx = x.reshape(x.shape[0],-1)
  N, K = xx.shape  # K: number of activations 
  dxx = np.zeros(xx.shape)
  dx1 = np.zeros(xx.shape)
  dvar = np.zeros(K)
  mean = np.mean(xx,axis=0)
  var = np.var(xx,axis=0)
  x1 = np.zeros(xx.shape)
  for k in range(K):
    x1[:,k] = (x[:,k]-mean[k])/np.sqrt(var[k]+1e-8)
  dmean = np.zeros(K)
  drr = np.zeros(rr.shape)
  dbb = np.zeros(bb.shape)
  for k in range(K):
    dx1[:,k] = dout[:,k]*rr[k]
    for i in range(N):
      dvar[k] += dx1[i][k]*(x[i][k]-mean[k])
      dmean[k] +=dx1[i][k]*(-1.0)/np.sqrt(var[k]+1e-8)
    dvar[k] *= (-1.0/2)*np.power(var[k]+1e-8,-1.5)
    for i in range(N):
      dmean[k] += dvar[k]*(-2)*(x[i][k]-mean[k])/N
    for i in range(N):
      dxx[i][k] = dx1[i][k]/np.sqrt(var[k]+1e-8)+dvar[k]*2*(x[i][k]-mean[k])/N+dmean[k]/N
    drr[k] = dout[:,k].T.dot(x1[:,k])
    dbb[k] = np.sum(dout[:,k])

  return dxx.reshape(x.shape),drr,dbb

def BNTransformation(x,rr,bb):
  mean = np.mean(x)
  var = np.var(x)
  x1 = (x-mean)/np.sqrt(var+1e-8)
  return x1,x1*rr + bb

def BatchNormalization_forward(x,rr,bb):
  """
  Inputs: 
     - x: Input data, of shape (N, d_1 .... d_k) 
      either from convnet or from an affine layer below
     - r: gama with shape of (x.shape[1],)
     - bb:  beta with shape of (x.shape[1],)
  """
  xx = x.reshape(x.shape[0],-1)
  x1 = np.zeros(xx.shape)
  yy = np.zeros(xx.shape)
  N,K = xx.shape
  for k in range(xx.shape[1]):
    x1[:,k],yy[:,k] = BNTransformation(xx[:,k],rr[k],bb[k])
    
  #mean = np.mean(x,axis=0)
  #var = np.mean(x,axis=0)
  cache = (x,x1,rr,bb)
  return yy, cache

def BatchNormalization_backward(dout, cache):
  """
  Inputs:
     - dout: Upstream derivative, of shape(N,K)
     - cache: Tuple of 
         x: Input data, of shape(N, d_1 .. d_k)
         rr, bb
  Returens:
     - dx(N,d_1 .... d_k), drr(x.shape[1]),dbb(x.shape[1])

  """
  print "batch normalization"
  x,x1,rr,bb = cache
  xx = x.reshape(x.shape[0],-1)
  N, K = xx.shape  # K: number of activations 
  dxx = np.zeros(xx.shape)
  dx1 = np.zeros(xx.shape)
  dvar = np.zeros(K)
  mean = np.mean(xx,axis=0)
  var = np.var(xx,axis=0)
  dmean = np.zeros(K)
  drr = np.zeros(rr.shape)
  dbb = np.zeros(bb.shape)

  dx1[:,range(K)] = dout[:,range(K)]*rr[range(K)]
  for k in range(K):
    dmean[k] +=np.sum(dx1[:,k])*(-1.0)/np.sqrt(var[k]+1e-8)
    dvar[k] += dx1[:,k].T.dot(x[:,k]-mean[k])*(-0.5)*np.power(var[k]+1e-8,-1.5)
    dmean[k] += dvar[k]*(-2)*np.sum(x[:,k]-mean[k])/N
    dxx[:,k] = dx1[:,k]/np.sqrt(var[k]+1e-8) + 2*dvar[k]*(x[:,k]-mean[k])/N + dmean[k]/N

  drr = np.sum(dout*x1,axis=0)
  dbb = np.sum(dout,axis=0)
  return dxx.reshape(x.shape),drr,dbb

#def convBatchNormalization_forward():
#def convBatchNormalization_backward():
def affine_backward(dout, cache):
  """
  Computes the backward pass for an affine layer.

  Inputs:
  - dout: Upstream derivative, of shape (N, M)
  - cache: Tuple of:
    - x: Input data, of shape (N, d_1, ... d_k)
    - w: Weights, of shape (D, M)

  Returns a tuple of:
  - dx: Gradient with respect to x, of shape (N, d1, ..., d_k)
  - dw: Gradient with respect to w, of shape (D, M)
  - db: Gradient with respect to b, of shape (M,)
  """
  x, w, b = cache
  dx = dout.dot(w.T).reshape(x.shape)
  dw = x.reshape(x.shape[0], -1).T.dot(dout)
  db = np.sum(dout, axis=0)
  return dx, dw, db

def relu_forward(x):
  """
  Computes the forward pass for a layer of rectified linear units (ReLUs).

  Input:
  - x: Inputs, of any shape

  Returns a tuple of:
  - out: Output, of the same shape as x
  - cache: x
  """
  out = np.maximum(0, x)
  cache = x
  return out, cache


def relu_backward(dout, cache):
  """
  Computes the backward pass for a layer of rectified linear units (ReLUs).

  Input:
  - dout: Upstream derivatives, of any shape
  - cache: Input x, of same shape as dout

  Returns:
  - dx: Gradient with respect to x
  """
  x = cache
  dx = np.where(x > 0, dout, 0)
  return dx


def dropout_forward(x, dropout_param):
  """
  Performs the forward pass for (inverted) dropout.

  Inputs:
  - x: Input data, of any shape
  - dropout_param: A dictionary with the following keys:
    - p: Dropout parameter. We keep each neuron output with probability p.
    - mode: 'test' or 'train'. If the mode is train, then perform dropout;
      if the mode is test, then just return the input.
    - seed: Seed for the random number generator. Passing seed makes this
      function deterministic, which is needed for gradient checking but not in
      real networks.

  Outputs:
  - out: Array of the same shape as x.
  - cache: A tuple (dropout_param, mask). In training mode, mask is the dropout
    mask that was used to multiply the input; in test mode, mask is None.
  """
  p, mode = dropout_param['p'], dropout_param['mode']
  if 'seed' in dropout_param:
    np.random.seed(dropout_param['seed'])

  mask = None
  out = None

  if mode == 'train':
    ###########################################################################
    # TODO: Implement the training phase forward pass for inverted dropout.   #
    # Store the dropout mask in the mask variable.                            #
    ###########################################################################
    mask = (np.random.rand(*x.shape)<p)/p
    out = x*mask
    ###########################################################################
    #                            END OF YOUR CODE                             #
    ###########################################################################
  elif mode == 'test':
    ###########################################################################
    # TODO: Implement the test phase forward pass for inverted dropout.       #
    ###########################################################################
    out = x
    ###########################################################################
    #                            END OF YOUR CODE                             #
    ###########################################################################

  cache = (dropout_param, mask)
  out = out.astype(x.dtype, copy=False)
  return out, cache

def dropout_backward(dout, cache):
  """
  Perform the backward pass for (inverted) dropout.

  Inputs:
  - dout: Upstream derivatives, of any shape
  - cache: (dropout_param, mask) from dropout_forward.
  """
  dropout_param, mask = cache
  mode = dropout_param['mode']
  if mode == 'train':
    ###########################################################################
    # TODO: Implement the training phase forward pass for inverted dropout.   #
    # Store the dropout mask in the mask variable.                            #
    ###########################################################################
    dx = dout*mask
    ###########################################################################
    #                            END OF YOUR CODE                             #
    ###########################################################################
  elif mode == 'test':
    dx = dout
  return dx

def svm_loss(x, y):
  """
  Computes the loss and gradient using for multiclass SVM classification.

  Inputs:
  - x: Input data, of shape (N, C) where x[i, j] is the score for the jth class
    for the ith input.
  - y: Vector of labels, of shape (N,) where y[i] is the label for x[i] and
    0 <= y[i] < C

  Returns a tuple of:
  - loss: Scalar giving the loss
  - dx: Gradient of the loss with respect to x
  """
  N = x.shape[0]
  correct_class_scores = x[np.arange(N), y]
  margins = np.maximum(0, x - correct_class_scores[:, np.newaxis] + 1.0)
  margins[np.arange(N), y] = 0
  loss = np.sum(margins) / N
  num_pos = np.sum(margins > 0, axis=1)
  dx = np.zeros_like(x)
  dx[margins > 0] = 1
  dx[np.arange(N), y] -= num_pos
  dx /= N
  return loss, dx


def softmax_loss(x, y):
  """
  Computes the loss and gradient for softmax classification.

  Inputs:
  - x: Input data, of shape (N, C) where x[i, j] is the score for the jth class
    for the ith input.
  - y: Vector of labels, of shape (N,) where y[i] is the label for x[i] and
    0 <= y[i] < C

  Returns a tuple of:
  - loss: Scalar giving the loss
  - dx: Gradient of the loss with respect to x
  """
  probs = np.exp(x - np.max(x, axis=1, keepdims=True))
  probs /= np.sum(probs, axis=1, keepdims=True)
  N = x.shape[0]
  loss = -np.sum(np.log(probs[np.arange(N), y])) / N
  dx = probs.copy()
  dx[np.arange(N), y] -= 1
  dx /= N
  return loss, dx

